// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
  }
  
  generator client {
    provider = "prisma-client-js"
  }
  
  model Post {
    id  String @id @default(auto()) @map("_id") @db.ObjectId
    jobId Int? @unique
    url String?
    jobSlug String?
    jobTitle String?
    companyName String?
    companyLogo String?
    jobIndustry String[]
    jobType String[]
    jobGeo String?
    jobLevel String?
    jobExcerpt String?
    jobDescription String?
    pubDate String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
  }


  //   model Profiles {
  //   id  String @id @default(auto()) @map("_id") @db.ObjectId
  //   username String? @unique
  //   usernameLastUpdate Int?
  //   email String?
  //   description String?
  //   fullName String?
  //   birthday DateTime?
  //   languages String?
  //   favoriteJobs String[]
  //   socialMedia String?
  //   theme String?
  //   notification String?
  //   display String[]
  //   createdAt DateTime @default(now())
  //   updatedAt DateTime @updatedAt
  // }

  enum UserRole {
    ADMIN
    USER
  }

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole        @default(USER)
  accounts      Account[]
  isTwoFactorEnabled  Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation? 
  sessions      Session[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  email             String
  token             String @unique
  expires           DateTime  

  @@unique([email,token])

}

model PasswordResetToken {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  email             String
  token             String @unique
  expires           DateTime  

  @@unique([email,token])

}


model TwoFactorToken {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  email             String
  token             String @unique
  expires           DateTime  

  @@unique([email,token])

}

model TwoFactorConfirmation {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

@@unique([userId])
}
  
  // each time you update the schema 
  // npx prisma generate
  // npx prisma bd push


  // for password encryption : 

  // npm i bcrypt
  // npm i -D @types/bcrypt


  // npx prisma studio > to show db informations
  // npx prisma generate > to reset the db // then npx prisma db push

// npx prisma db push --force-reset // to delete all
